const naturalLanguageService = require("../services/natural-language");
const reminderModel = require("../models/reminders");
const { parseReminderParams } = require("../utils/reminder-parser");
const { getWeekPeriodText } = require("../utils/datetime");

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function handleMessages(bot) {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && !text.startsWith("/")) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if (text.includes("=") && text.includes("&")) {
          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç text=—Ç–µ–∫—Å—Ç&time=–≤—Ä–µ–º—è
          const params = parseReminderParams(text);
          if (params) {
            const reminder = await reminderModel.saveReminder(chatId, params);

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
            const replyMarkup = {
              inline_keyboard: [
                [
                  {
                    text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    callback_data: `delete_reminder_${reminder.id}`,
                  },
                ],
              ],
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
            const sentMessage = await bot.sendMessage(
              chatId,
              `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!`,
              {
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
              }
            );

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
              try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                bot
                  .getChat(chatId)
                  .then(() => {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    return bot.editMessageReplyMarkup(
                      { inline_keyboard: [] },
                      {
                        chat_id: chatId,
                        message_id: sentMessage.message_id,
                      }
                    );
                  })
                  .catch((err) => {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                    console.log(
                      `–°–æ–æ–±—â–µ–Ω–∏–µ ${sentMessage.message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`
                    );
                  });
              } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:", error);
              }
            }, 10000);
          }
        } else {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ GigaChat
          try {
            console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GigaChat API");
            const formattedText =
              await naturalLanguageService.processNaturalLanguageWithGigaChat(
                text
              );
            console.log("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç (GigaChat):", formattedText);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if (
              formattedText &&
              formattedText.includes("text=") &&
              formattedText.includes("time=")
            ) {
              const params = parseReminderParams(formattedText);
              if (params) {
                const reminder = await reminderModel.saveReminder(
                  chatId,
                  params
                );

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
                const replyMarkup = {
                  inline_keyboard: [
                    [
                      {
                        text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                        callback_data: `delete_reminder_${reminder.id}`,
                      },
                    ],
                  ],
                };

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
                const sentMessage = await bot.sendMessage(
                  chatId,
                  `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\nüÜî ID: \`${reminder.id}\`\nüìù –¢–µ–∫—Å—Ç: ${params.text}\nüïí –í—Ä–µ–º—è: ${params.time}\nüìÖ –î–Ω–∏: ${params.days}\n‚è≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: ${reminder.count_in_days}`,
                  {
                    parse_mode: "Markdown",
                    reply_markup: replyMarkup,
                  }
                );

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                  try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    bot
                      .getChat(chatId)
                      .then(() => {
                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        return bot.editMessageReplyMarkup(
                          { inline_keyboard: [] },
                          {
                            chat_id: chatId,
                            message_id: sentMessage.message_id,
                          }
                        );
                      })
                      .catch((err) => {
                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                        console.log(
                          `–°–æ–æ–±—â–µ–Ω–∏–µ ${sentMessage.message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`
                        );
                      });
                  } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:", error);
                  }
                }, 10000);

                return;
              }
            } else {
              console.log(
                "–û—Ç–≤–µ—Ç GigaChat –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É."
              );
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat");
            }
          } catch (gigaChatError) {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ GigaChat:",
              gigaChatError.message
            );
            console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞");

            // –ï—Å–ª–∏ GigaChat –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            const formattedText =
              naturalLanguageService.parseNaturalLanguage(text);
            console.log("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ):", formattedText);

            const params = parseReminderParams(formattedText);
            if (params) {
              const reminder = await reminderModel.saveReminder(chatId, params);

              // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
              const replyMarkup = {
                inline_keyboard: [
                  [
                    {
                      text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                      callback_data: `delete_reminder_${reminder.id}`,
                    },
                  ],
                ],
              };

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
              const sentMessage = await bot.sendMessage(
                chatId,
                `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!`,
                {
                  parse_mode: "Markdown",
                  reply_markup: replyMarkup,
                }
              );

              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
              setTimeout(() => {
                try {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                  bot
                    .getChat(chatId)
                    .then(() => {
                      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                      return bot.editMessageReplyMarkup(
                        { inline_keyboard: [] },
                        {
                          chat_id: chatId,
                          message_id: sentMessage.message_id,
                        }
                      );
                    })
                    .catch((err) => {
                      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                      console.log(
                        `–°–æ–æ–±—â–µ–Ω–∏–µ ${sentMessage.message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`
                      );
                    });
                } catch (error) {
                  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:", error);
                }
              }, 10000);
            }
          }
        }
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
function handleCallbacks(bot) {
  bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;
    const chatId = msg.chat.id;
    const messageId = msg.message_id;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if (data.startsWith("delete_reminder_")) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
        const reminderId = data.replace("delete_reminder_", "");

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
          show_alert: false,
        });

        // –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await reminderModel
          .deleteReminder(reminderId, userId)
          .catch((error) => {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:",
              error
            );
          });

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await bot.deleteMessage(chatId, messageId).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
          // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    else if (data.startsWith("recreate_")) {
      const reminderId = data.replace("recreate_", "");
      const templateId = `template_${reminderId}`;

      try {
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        const template = await reminderModel.getReminderTemplate(
          templateId,
          userId
        );

        if (!template) {
          bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
            show_alert: true,
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
        const params = {
          text: template.text,
          time: template.time,
          days: template.days,
          countInDays: "1",
          everyWeek: template.every_week.toString(),
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await reminderModel.saveReminder(userId, params);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
          show_alert: false,
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", error);
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
          show_alert: true,
        });
      }
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
function setupMessageHandlers(bot) {
  handleMessages(bot);
  handleCallbacks(bot);
}

module.exports = {
  setupMessageHandlers,
};
