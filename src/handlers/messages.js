const naturalLanguageService = require("../services/natural-language");
const reminderModel = require("../models/reminders");
const { parseReminderParams } = require("../utils/reminder-parser");
const { getWeekPeriodText } = require("../utils/datetime");

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function handleMessages(bot) {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && !text.startsWith("/")) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if (text.includes("=") && text.includes("&")) {
          // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç text=—Ç–µ–∫—Å—Ç&time=–≤—Ä–µ–º—è
          const params = parseReminderParams(text);
          if (params) {
            const reminder = await reminderModel.saveReminder(chatId, params);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            bot.sendMessage(chatId, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!`, {
              parse_mode: "Markdown",
            });
          }
        } else {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ GigaChat
          try {
            console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ GigaChat API");
            const formattedText =
              await naturalLanguageService.processNaturalLanguageWithGigaChat(
                text
              );
            console.log("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç (GigaChat):", formattedText);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if (
              formattedText &&
              formattedText.includes("text=") &&
              formattedText.includes("time=")
            ) {
              const params = parseReminderParams(formattedText);
              if (params) {
                const reminder = await reminderModel.saveReminder(
                  chatId,
                  params
                );

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
                bot.sendMessage(
                  chatId,
                  `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\nüÜî ID: \`${reminder.id}\`\nüìù –¢–µ–∫—Å—Ç: ${params.text}\nüïí –í—Ä–µ–º—è: ${params.time}\nüìÖ –î–Ω–∏: ${params.days}\n‚è≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: ${reminder.count_in_days}`,
                  { parse_mode: "Markdown" }
                );
                return;
              }
            } else {
              console.log(
                "–û—Ç–≤–µ—Ç GigaChat –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É."
              );
              throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat");
            }
          } catch (gigaChatError) {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ GigaChat:",
              gigaChatError.message
            );
            console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞");

            // –ï—Å–ª–∏ GigaChat –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            const formattedText =
              naturalLanguageService.parseNaturalLanguage(text);
            console.log("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ):", formattedText);

            const params = parseReminderParams(formattedText);
            if (params) {
              const reminder = await reminderModel.saveReminder(chatId, params);

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
              bot.sendMessage(chatId, `‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!`, {
                parse_mode: "Markdown",
              });
            }
          }
        }
      } catch (error) {
        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
function handleCallbacks(bot) {
  bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (data.startsWith("recreate_")) {
      const reminderId = data.replace("recreate_", "");
      const templateId = `template_${reminderId}`;

      try {
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
        const template = await reminderModel.getReminderTemplate(
          templateId,
          userId
        );

        if (!template) {
          bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
            show_alert: true,
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
        const params = {
          text: template.text,
          time: template.time,
          days: template.days,
          countInDays: "1",
          everyWeek: template.every_week.toString(),
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await reminderModel.saveReminder(userId, params);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
          show_alert: false,
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", error);
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
          show_alert: true,
        });
      }
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
function setupMessageHandlers(bot) {
  handleMessages(bot);
  handleCallbacks(bot);
}

module.exports = {
  setupMessageHandlers,
};
