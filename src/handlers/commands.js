const config = require("../config");
const userModel = require("../models/users");
const reminderModel = require("../models/reminders");
const { parseReminderParams } = require("../utils/reminder-parser");
const { sendReminderCreatedMessage } = require("../utils/reminder-utils");

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
function handleStart(bot) {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await userModel.saveUser(msg.from);
    sendHelpMessage(bot, chatId);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
function handleHelp(bot) {
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    sendHelpMessage(bot, chatId);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manual –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function handleManual(bot) {
  bot.onText(/\/manual (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const manualText = match[1];

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (!manualText.includes("text=") || !manualText.includes("time=")) {
        bot.sendMessage(
          chatId,
          "–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã text –∏ time"
        );
        return;
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const params = parseReminderParams(manualText);
      if (params) {
        const reminder = await reminderModel.saveReminder(chatId, params);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await sendReminderCreatedMessage(bot, chatId, params, reminder);
      }
    } catch (error) {
      bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${error.message}`
      );
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function handleUsers(bot) {
  bot.onText(/\/users/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (userId.toString() === config.ADMIN_ID.toString()) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userCount = await userModel.getUserCount();

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await bot.sendMessage(chatId, `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ, –∑–∞–ø—Ä–æ—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞–∑–æ–±—å–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
        if (userCount > 10) {
          const allUsers = await userModel.getAllUsers();

          // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const MAX_USERS_PER_MESSAGE = 50;
          const totalPages = Math.ceil(allUsers.length / MAX_USERS_PER_MESSAGE);

          await bot.sendMessage(
            chatId,
            `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${totalPages} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.`
          );

          // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          for (let page = 0; page < totalPages; page++) {
            const startIdx = page * MAX_USERS_PER_MESSAGE;
            const endIdx = Math.min(
              startIdx + MAX_USERS_PER_MESSAGE,
              allUsers.length
            );
            const pageUsers = allUsers.slice(startIdx, endIdx);

            let message = `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}\n\n`;

            pageUsers.forEach((user) => {
              message += `ID: ${user.id}, Username: ${
                user.username || "-"
              }, –ò–º—è: ${user.first_name || "-"}, –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${
                user.created_at || "-"
              }\n`;
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise((resolve) => setTimeout(resolve, 100));
            await bot.sendMessage(chatId, message);
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
          const users = await userModel.getRecentUsers(10);

          let message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n";
          if (users.length > 0) {
            users.forEach((user) => {
              message += `ID: ${user.id}, Username: ${
                user.username || "-"
              }, –ò–º—è: ${user.first_name || "-"}\n`;
            });
          } else {
            message += "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.";
          }

          await bot.sendMessage(chatId, message);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
      }
    } else {
      bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notification (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
function handleNotification(bot) {
  bot.onText(/\/notification[\s\S]*/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const text = msg.text; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    if (userId.toString() === config.ADMIN_ID.toString()) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        const commandRegex = /\/notification\s+"([\s\S]+?)"/;
        const matches = text.match(commandRegex);

        if (!matches || !matches[1]) {
          bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notification "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö"'
          );
          return;
        }

        const notificationText = matches[1];

        const users = await userModel.getAllUsers();

        let sentCount = 0;
        let errorCount = 0;

        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 30 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const BATCH_SIZE = 30;
        const totalBatches = Math.ceil(users.length / BATCH_SIZE);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞–º–∏
        for (let batch = 0; batch < totalBatches; batch++) {
          const startIdx = batch * BATCH_SIZE;
          const endIdx = Math.min(startIdx + BATCH_SIZE, users.length);
          const batchUsers = users.slice(startIdx, endIdx);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ
          for (const user of batchUsers) {
            try {
              await bot.sendMessage(user.id, notificationText, {
                parse_mode: "HTML",
              });
              sentCount++;
            } catch (error) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
              try {
                await bot.sendMessage(user.id, notificationText);
                sentCount++;
              } catch (secondError) {
                console.error(
                  `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}`,
                  secondError
                );
                errorCount++;
              }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise((resolve) => setTimeout(resolve, 50));
          }

          // –ï—Å–ª–∏ –≥—Ä—É–ø–ø –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          if (totalBatches > 1) {
            await bot.sendMessage(
              chatId,
              `‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.min(
                100,
                Math.round(((batch + 1) * 100) / totalBatches)
              )}% (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount}, –æ—à–∏–±–æ–∫: ${errorCount})`
            );
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await bot.sendMessage(chatId, `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
        bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
      }
    } else {
      bot.sendMessage(chatId, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
function handleDelete(bot) {
  bot.onText(/\/delete (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const reminderId = match[1];

    try {
      const changes = await reminderModel.deleteReminder(reminderId, chatId);

      if (changes > 0) {
        bot.sendMessage(chatId, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!");
      } else {
        bot.sendMessage(
          chatId,
          "üîç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_all
function handleDeleteAll(bot) {
  bot.onText(/\/delete_all/, async (msg) => {
    const chatId = msg.chat.id;

    try {
      const changes = await reminderModel.deleteAllUserReminders(chatId);
      bot.sendMessage(chatId, `üßπ –£–¥–∞–ª–µ–Ω–æ ${changes} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
      bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
function handleList(bot) {
  bot.onText(/\/list/, async (msg) => {
    const chatId = msg.chat.id;

    try {
      const reminders = await reminderModel.getUserReminders(chatId);

      if (reminders.length === 0) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        return;
      }

      // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const MAX_REMINDERS_PER_MESSAGE = 5;
      const totalPages = Math.ceil(
        reminders.length / MAX_REMINDERS_PER_MESSAGE
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      await bot.sendMessage(
        chatId,
        `üìã *–ù–∞–π–¥–µ–Ω–æ ${reminders.length} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n` +
          (totalPages > 1
            ? `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ ${totalPages} —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.`
            : ""),
        { parse_mode: "Markdown" }
      );

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ø–∞–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      for (let page = 0; page < totalPages; page++) {
        const startIdx = page * MAX_REMINDERS_PER_MESSAGE;
        const endIdx = Math.min(
          startIdx + MAX_REMINDERS_PER_MESSAGE,
          reminders.length
        );
        const pageReminders = reminders.slice(startIdx, endIdx);

        let message =
          totalPages > 1
            ? `üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}*\n\n`
            : "";

        pageReminders.forEach((reminder) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
          let remainingDays = "";
          if (reminder.count_in_days === 99999) {
            remainingDays = "‚ôæÔ∏è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)";
          } else {
            remainingDays = reminder.count_in_days;
          }

          message += `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${reminder.text}\n`;

          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
          const times = reminder.time.split(",");
          if (times.length > 1) {
            message += `üïí *–í—Ä–µ–º—è:* ${times.join(", ")}\n`;
          } else {
            message += `üïí *–í—Ä–µ–º—è:* ${reminder.time}\n`;
          }

          message += `üÜî *ID:* \`${reminder.id}\`\n`;
          message += `‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* ${remainingDays}\n`;

          if (reminder.days && reminder.days !== "–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å") {
            message += `üìÖ *–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:* ${reminder.days}\n`;
          }

          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª—å
          let periodText = "";
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —á–∏—Å–ª—É, —Ç–∞–∫ –∫–∞–∫ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ INTEGER
          const everyWeekValue = parseInt(reminder.every_week);

          if (everyWeekValue === 0) {
            periodText = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é";
          } else if (everyWeekValue === 1) {
            periodText = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é";
          } else if (everyWeekValue >= 2) {
            periodText = `–∫–∞–∂–¥—ã–µ ${everyWeekValue + 1} –Ω–µ–¥–µ–ª–∏`;
          } else {
            // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –ë–î –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            periodText = `${reminder.every_week}`;
          }

          message += `üîÑ *–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:* ${periodText}\n`;
          message += "\n";
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
        await new Promise((resolve) => setTimeout(resolve, 100));
        await bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendHelpMessage(bot, chatId) {
  let helpText = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

‚úÖ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
   - "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 –≤—ã–≥—É–ª—è—Ç—å —Å–æ–±–∞–∫—É"
   - "–ù–∞–ø–æ–º–Ω–∏ –≤ 9 —É—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏"
   - "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00 –ø—Ä–æ –ø–ª–∞–Ω–µ—Ä–∫—É"
   - "–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É"

2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
${`/manual text=–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è&time=14:00,16:00&countInDays=1&days=–≤—Ç,–ø—Ç&everyWeek=0`}
`;

  helpText += `
üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
- text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –ø–æ –ú–°–ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00,12:30,18:00
- days: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
- countInDays: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —É–∫–∞–∂–∏—Ç–µ 999999
- everyWeek –∏–ª–∏ countInWeeks: –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –Ω–µ–¥–µ–ª—è—Ö:
  * 0 - –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
  * 1 - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
  * 2 - –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –∏ —Ç.–¥.

‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã:
üîç /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üìã /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üóëÔ∏è /delete ID - —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
üßπ /delete_all - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
`;

  bot.sendMessage(chatId, helpText);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
function setupCommandHandlers(bot) {
  handleStart(bot);
  handleHelp(bot);
  handleManual(bot);
  handleUsers(bot);
  handleNotification(bot);
  handleDelete(bot);
  handleDeleteAll(bot);
  handleList(bot);
}

module.exports = {
  setupCommandHandlers,
  sendHelpMessage,
};
