const gigaChatService = require("./gigachat");
const {
  getCurrentMoscowTime,
  calculateRelativeTime,
} = require("../utils/datetime");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ GigaChat
async function processNaturalLanguageWithGigaChat(text) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
    let accessToken = gigaChatService.getAccessToken();
    if (!accessToken) {
      console.log("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω GigaChat, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π");
      accessToken = await gigaChatService.getGigaChatAccessToken();
      if (!accessToken) {
        console.log(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"
        );
        return parseNaturalLanguage(text);
      }
      gigaChatService.setAccessToken(accessToken);
    }

    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
    const moscowTime = getCurrentMoscowTime();
    const currentTimeStr = `${moscowTime
      .getHours()
      .toString()
      .padStart(2, "0")}:${moscowTime
      .getMinutes()
      .toString()
      .padStart(2, "0")}`;
    console.log("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö:", currentTimeStr);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GigaChat —Å —á—ë—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    const prompt = `
–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.

–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: ${currentTimeStr}

–ó–ê–î–ê–ß–ê:
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. 
–§–æ—Ä–º–∞—Ç –î–û–õ–ñ–ï–ù —Å–æ–¥–µ—Ä–∂–∞—Ç—å –í–°–ï —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: text, time –∏ countInDays.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
text=–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è&time=–ß–ß:–ú–ú&countInDays=1

–ü–†–ê–í–ò–õ–ê:
1. text: –ö—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (3-4 —Å–ª–æ–≤–∞)
2. time: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24-—á–∞—Å–æ–≤ (–ß–ß:–ú–ú)
   - –î–ª—è "–≤ 13" –∏—Å–ø–æ–ª—å–∑—É–π "13:00"
   - –î–ª—è "—É—Ç—Ä–æ–º" - "09:00", "–¥–Ω–µ–º" - "13:00", "–≤–µ—á–µ—Ä–æ–º" - "19:00"
3. countInDays: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –¥–ª—è "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/–ø–æ—Å—Ç–æ—è–Ω–Ω–æ" - 999999
4. days: –£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å

–û–ß–ï–ù–¨ –í–ê–ñ–ù–û: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤", —Ä–∞—Å—Å—á–∏—Ç–∞–π –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
- –ï—Å–ª–∏ —Å–µ–π—á–∞—Å ${currentTimeStr}, —Ç–æ "—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" –±—É–¥–µ—Ç ${calculateRelativeTime(
      moscowTime,
      5,
      "minutes"
    )}
- –ï—Å–ª–∏ —Å–µ–π—á–∞—Å ${currentTimeStr}, —Ç–æ "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç" –±—É–¥–µ—Ç ${calculateRelativeTime(
      moscowTime,
      30,
      "minutes"
    )}
- –ï—Å–ª–∏ —Å–µ–π—á–∞—Å ${currentTimeStr}, —Ç–æ "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞" –±—É–¥–µ—Ç ${calculateRelativeTime(
      moscowTime,
      2,
      "hours"
    )}

–ü–†–ò–ú–ï–†–´:
1. –ó–∞–ø—Ä–æ—Å: "–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã"
   –û—Ç–≤–µ—Ç: text=–ü–æ–ª–∏—Ç—å —Ü–≤–µ—Ç—ã&time=${calculateRelativeTime(
     moscowTime,
     5,
     "minutes"
   )}&countInDays=1

2. –ó–∞–ø—Ä–æ—Å: "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00"
   –û—Ç–≤–µ—Ç: text=–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ&time=18:00&countInDays=1

3. –ó–∞–ø—Ä–æ—Å: "–ù–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –ø–∏—Ç—å –≥–ª—é—Ç–∞–º–∏–Ω –≤ 12"
   –û—Ç–≤–µ—Ç: text=–ü–∏—Ç—å –≥–ª—é—Ç–∞–º–∏–Ω&time=12:00&countInDays=999999&days=–≤—Ç

4. –ó–∞–ø—Ä–æ—Å: "–ß–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
   –û—Ç–≤–µ—Ç: text=–ü–æ–∑–≤–æ–Ω–∏—Ç—å&time=${calculateRelativeTime(
     moscowTime,
     3,
     "minutes"
   )}&countInDays=1

5. –ó–∞–ø—Ä–æ—Å: "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 –≤—ã–≥—É–ª—è—Ç—å —Å–æ–±–∞–∫—É"
   –û—Ç–≤–µ—Ç: text=–í—ã–≥—É–ª—è—Ç—å —Å–æ–±–∞–∫—É&time=18:00&countInDays=1

6. –ó–∞–ø—Ä–æ—Å: "–ù–∞–ø–æ–º–Ω–∏ –≤ 9 —É—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏"
   –û—Ç–≤–µ—Ç: text=–ü—Ä–∏–Ω—è—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏&time=09:00&countInDays=1

7. –ó–∞–ø—Ä–æ—Å: "–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü—É –≤ 9:00 –Ω–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –ø–ª–∞–Ω–µ—Ä–∫—É"
   –û—Ç–≤–µ—Ç: text=–ü–ª–∞–Ω–µ—Ä–∫–∞&time=09:00&countInDays=999999&days=–ø–Ω,–ø—Ç

8. –ó–∞–ø—Ä–æ—Å: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ 19:36"
   –û—Ç–≤–µ—Ç: text=–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É&time=19:36&countInDays=999999&days=–≤—Ç

9. –ó–∞–ø—Ä–æ—Å: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥ –ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ 19:36"
   –û—Ç–≤–µ—Ç: text=–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É&time=19:36&countInDays=999999&days=–≤—Ç,—á—Ç

10. –ó–∞–ø—Ä–æ—Å: "–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:44"
   –û—Ç–≤–µ—Ç: text=–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É&time=19:44&countInDays=999999

11. –ó–∞–ø—Ä–æ—Å: "–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 19:47"
   –û—Ç–≤–µ—Ç: text=–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É&time=19:47&countInDays=1&days=–ø—Ç

12. –ó–∞–ø—Ä–æ—Å: "–ø–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ –ø—è—Ç–Ω–∏—Ü—É –∏ –≤ —Å—É–±–±–æ—Ç—É –≤ 12:00"
   –û—Ç–≤–µ—Ç: text=–ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É&time=12:00&countInDays=1&days=–ø—Ç,—Å–±

13. –ó–∞–ø—Ä–æ—Å: "–ø–æ–ø–µ–π –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13"
   –û—Ç–≤–µ—Ç: text=–ü–æ–ø–µ–π –≤–æ–¥—ã&time=13:00&countInDays=999999

14. –ó–∞–ø—Ä–æ—Å: "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 7:30 –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
   –û—Ç–≤–µ—Ç: text=–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É&time=07:30&countInDays=999999

15. –ó–∞–ø—Ä–æ—Å: "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç—É –≤ 9:00"
   –û—Ç–≤–µ—Ç: text=–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—á—Ç—É&time=09:00&countInDays=999999

16. –ó–∞–ø—Ä–æ—Å: "–≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10 —É—Ç—Ä–∞ –∏ –≤ 5 –≤–µ—á–µ—Ä–∞"
   –û—Ç–≤–µ—Ç: text=–í—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏&time=10:00,17:00&countInDays=999999

17. –ó–∞–ø—Ä–æ—Å: "–≤—ã–ø–∏—Ç—å –≤–æ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22"
   –û—Ç–≤–µ—Ç: text=–í—ã–ø–∏—Ç—å –≤–æ–¥—ã&time=22:00&countInDays=999999

18. –ó–∞–ø—Ä–æ—Å: "–ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ 8"
   –û—Ç–≤–µ—Ç: text=–ü—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ&time=08:00&countInDays=1

19. –ó–∞–ø—Ä–æ—Å: "—Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –º–∏—Ç–∏–Ω–≥ –≤ —Å–∏–Ω—Ç–µ–∑–µ –≤ 14:00 –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫"
   –û—Ç–≤–µ—Ç: text=–ú–∏—Ç–∏–Ω–≥ –≤ —Å–∏–Ω—Ç–µ–∑–µ&time=14:00&countInDays=999999&days=–≤—Ç&countInWeeks=1

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${text}"

–í–ê–ñ–ù–û: –î–∞–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat:", text);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat API
      const result = await gigaChatService.sendGigaChatRequest(
        accessToken,
        prompt,
        text
      );
      console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω:", result);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      let formattedResult = result.trim();

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (
        !formattedResult.includes("time=") ||
        !formattedResult.includes("countInDays=")
      ) {
        console.log(
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å"
        );

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        let reminderText = "";
        if (formattedResult.includes("text=")) {
          const textMatch = formattedResult.match(/text=([^&]+)/);
          if (textMatch) {
            reminderText = textMatch[1];
          }
        } else {
          // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          reminderText = text
            .replace(/–Ω–∞–ø–æ–º–Ω–∏(—Ç—å)?|—á–µ—Ä–µ–∑ \d+ (–º–∏–Ω—É—Ç|—á–∞—Å[–∞-—è]*)/gi, "")
            .trim();
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const localResult = parseNaturalLanguage(text);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        let time = "";
        let countInDays = "1";
        let days = "";

        if (localResult.includes("time=")) {
          const timeMatch = localResult.match(/time=([^&]+)/);
          if (timeMatch) time = timeMatch[1];
        }

        if (localResult.includes("countInDays=")) {
          const daysMatch = localResult.match(/countInDays=([^&]+)/);
          if (daysMatch) countInDays = daysMatch[1];
        }

        if (localResult.includes("days=")) {
          const daysWeekMatch = localResult.match(/days=([^&]+)/);
          if (daysWeekMatch) days = daysWeekMatch[1];
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        formattedResult = `text=${reminderText}&time=${time}&countInDays=${countInDays}`;
        if (days) formattedResult += `&days=${days}`;

        console.log("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", formattedResult);
      }

      return formattedResult;
    } catch (apiError) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      if (
        apiError.message.includes("401") ||
        apiError.message.includes("auth")
      ) {
        console.log("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π");
        accessToken = await gigaChatService.getGigaChatAccessToken();
        gigaChatService.setAccessToken(accessToken);

        if (accessToken) {
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          try {
            const result = await gigaChatService.sendGigaChatRequest(
              accessToken,
              prompt,
              text
            );
            console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GigaChat —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º:", result);
            return result;
          } catch (retryError) {
            console.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ GigaChat:",
              retryError.message
            );
            return parseNaturalLanguage(text);
          }
        } else {
          console.log(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"
          );
          return parseNaturalLanguage(text);
        }
      }

      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat API:",
        apiError.message
      );
      console.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞");
      return parseNaturalLanguage(text);
    }
  } catch (error) {
    console.error(
      "‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ GigaChat:",
      error.message
    );
    return parseNaturalLanguage(text);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–∞—è)
function parseNaturalLanguage(text) {
  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
  const moscowTime = getCurrentMoscowTime();

  // –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å:", text);
  console.log(
    "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö:",
    `${moscowTime.getHours().toString().padStart(2, "0")}:${moscowTime
      .getMinutes()
      .toString()
      .padStart(2, "0")}`
  );

  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  const timeRegex = /–≤ (\d{1,2})[:\.]?(\d{2})?/g;
  const timeMatches = [...text.matchAll(timeRegex)];

  let reminderTime = "";
  if (timeMatches.length > 0) {
    const times = timeMatches.map((match) => {
      const hours = match[1].padStart(2, "0");
      const minutes = match[2] ? match[2] : "00";
      return `${hours}:${minutes}`;
    });

    reminderTime = times.join(",");
  }

  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ "—É—Ç—Ä–æ–º", "–¥–Ω–µ–º", "–≤–µ—á–µ—Ä–æ–º", "–Ω–æ—á—å—é"
  if (!reminderTime) {
    if (text.includes("—É—Ç—Ä–æ–º")) reminderTime = "09:00";
    else if (text.includes("–¥–Ω–µ–º") || text.includes("–¥–Ω—ë–º"))
      reminderTime = "13:00";
    else if (text.includes("–≤–µ—á–µ—Ä–æ–º")) reminderTime = "19:00";
    else if (text.includes("–Ω–æ—á—å—é")) reminderTime = "23:00";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
  const relativeTimeRegex = /—á–µ—Ä–µ–∑ (\d+) ?(–º–∏–Ω—É—Ç|—á–∞—Å[–∞-—è]*)/i;
  const relativeMatch = text.match(relativeTimeRegex);

  if (relativeMatch) {
    const value = parseInt(relativeMatch[1]);
    const unit = relativeMatch[2];

    const relativeTime = new Date(moscowTime);

    if (unit.startsWith("–º–∏–Ω—É—Ç")) {
      relativeTime.setMinutes(relativeTime.getMinutes() + value);
    } else if (unit.startsWith("—á–∞—Å")) {
      relativeTime.setHours(relativeTime.getHours() + value);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú
    const hours = relativeTime.getHours().toString().padStart(2, "0");
    const minutes = relativeTime.getMinutes().toString().padStart(2, "0");
    reminderTime = `${hours}:${minutes}`;
    console.log(
      `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: —á–µ—Ä–µ–∑ ${value} ${unit} ‚Üí ${reminderTime}`
    );
  }

  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 5 –º–∏–Ω—É—Ç
  if (!reminderTime) {
    const defaultTime = new Date(moscowTime);
    defaultTime.setMinutes(defaultTime.getMinutes() + 5);

    const hours = defaultTime.getHours().toString().padStart(2, "0");
    const minutes = defaultTime.getMinutes().toString().padStart(2, "0");
    reminderTime = `${hours}:${minutes}`;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
  let reminderDays = "–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –¥–Ω–∏
  let countInDays = "1"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞

  // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const daysMapping = {
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: "–ø–Ω",
    –≤—Ç–æ—Ä–Ω–∏–∫: "–≤—Ç",
    —Å—Ä–µ–¥—É: "—Å—Ä",
    —Å—Ä–µ–¥–∞: "—Å—Ä",
    —á–µ—Ç–≤–µ—Ä–≥: "—á—Ç",
    –ø—è—Ç–Ω–∏—Ü—É: "–ø—Ç",
    –ø—è—Ç–Ω–∏—Ü–∞: "–ø—Ç",
    —Å—É–±–±–æ—Ç—É: "—Å–±",
    —Å—É–±–±–æ—Ç–∞: "—Å–±",
    –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: "–≤—Å",
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ
  const dayMatches = Object.keys(daysMapping).filter((day) =>
    text.toLowerCase().includes(day.toLowerCase())
  );

  if (dayMatches.length > 0) {
    // –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "–∫–∞–∂–¥—ã–π" –∏–ª–∏ "–ø–æ", —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const isRecurring = text.match(/(–∫–∞–∂–¥[–∞-—è]+|–ø–æ|–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ|—Ä–µ–≥—É–ª—è—Ä–Ω–æ)/i);

    if (isRecurring) {
      countInDays = "99999"; // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–ø—Ä–∞–≤–æ–∫
      reminderDays = dayMatches.map((day) => daysMapping[day]).join(",");
    } else {
      // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
      countInDays = "1";
      reminderDays = dayMatches.map((day) => daysMapping[day]).join(",");
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" –∏ —Ç.–¥.
  if (text.match(/(–∫–∞–∂–¥[–∞-—è]+ –¥–µ–Ω—å|–µ–∂–µ–¥–Ω–µ–≤–Ω–æ|–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ|–≤—Å–µ–≥–¥–∞|–ø–æ—Å—Ç–æ—è–Ω–Ω–æ)/i)) {
    countInDays = "99999";
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∑–∞–≤—Ç—Ä–∞"
  if (text.toLowerCase().includes("–∑–∞–≤—Ç—Ä–∞")) {
    const tomorrow = new Date(moscowTime);
    tomorrow.setDate(tomorrow.getDate() + 1);

    const tomorrowDay = tomorrow.getDay();
    const daysMap = ["–≤—Å", "–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±"];

    reminderDays = daysMap[tomorrowDay];
    countInDays = "1"; // –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞)
  let reminderText = text
    .replace(/–Ω–∞–ø–æ–º–Ω–∏(—Ç—å)?/i, "")
    .replace(/—á–µ—Ä–µ–∑ \d+ (–º–∏–Ω—É—Ç|—á–∞—Å[–∞-—è]*)/gi, "")
    .replace(/–≤ \d{1,2}[:\.]?\d{0,2}/g, "")
    .replace(/(–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/gi, "")
    .replace(/(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–¥–Ω—ë–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é)/gi, "")
    .replace(/(–∫–∞–∂–¥—ã–π|–∫–∞–∂–¥[–∞-—è]+|–µ–∂–µ–¥–Ω–µ–≤–Ω–æ|–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ|–ø–æ|—Ä–µ–≥—É–ª—è—Ä–Ω–æ)/gi, "");

  // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  Object.keys(daysMapping).forEach((day) => {
    reminderText = reminderText.replace(new RegExp(day, "gi"), "");
  });

  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
  reminderText = reminderText
    .replace(/\s+/g, " ")
    .replace(/^\s+|\s+$|\s+(?=\W)/g, "")
    .trim();

  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
  if (reminderText.length < 3) {
    reminderText = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ";
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const result = `text=${reminderText}&time=${reminderTime}&countInDays=${countInDays}`;

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
  if (reminderDays !== "–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å") {
    return `${result}&days=${reminderDays}`;
  }

  return result;
}

module.exports = {
  processNaturalLanguageWithGigaChat,
  parseNaturalLanguage,
};
