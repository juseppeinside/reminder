require("dotenv").config();

const config = require("../config");

const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const sqlite3 = require("sqlite3").verbose();
const { v4: uuidv4 } = require("uuid");
const fs = require("fs");

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const dbDir = "./db";
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database("./db/reminders.db");

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS reminders (
    id TEXT PRIMARY KEY,
    user_id INTEGER,
    text TEXT,
    time TEXT,
    days TEXT,
    count_in_days INTEGER,
    every_week INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id)
  )`);

  // –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  db.run(`CREATE TABLE IF NOT EXISTS reminder_templates (
    id TEXT PRIMARY KEY,
    user_id INTEGER,
    text TEXT,
    time TEXT,
    days TEXT,
    every_week INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users (id)
  )`);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const token = config.TELEGRAM_BOT_TOKEN;
const adminId = config.ADMIN_ID;

if (!token) {
  console.error("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  saveUser(msg.from);
  sendHelpMessage(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  sendHelpMessage(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.onText(/\/users/, (msg) => {
  const chatId = msg.chat.id;

  if (chatId.toString() === adminId) {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    db.get("SELECT COUNT(*) as count FROM users", (err, countRow) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
        bot.sendMessage(
          chatId,
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        );
        return;
      }

      // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      db.all(
        "SELECT * FROM users ORDER BY created_at DESC LIMIT 10",
        (err, users) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
            bot.sendMessage(
              chatId,
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            );
            return;
          }

          let message = `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${countRow.count}\n\n`;

          if (users.length > 0) {
            message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n";
            users.forEach((user) => {
              message += `ID: ${user.id}, Username: ${
                user.username || "-"
              }, –ò–º—è: ${user.first_name || "-"}\n`;
            });
          } else {
            message += "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.";
          }

          bot.sendMessage(chatId, message);
        }
      );
    });
  } else {
    bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notification (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
bot.onText(/\/notification (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const notificationText = match[1];

  if (chatId.toString() === adminId) {
    db.all("SELECT id FROM users", (err, users) => {
      if (err) {
        console.error(err);
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        return;
      }

      let sentCount = 0;
      users.forEach((user) => {
        bot
          .sendMessage(user.id, notificationText)
          .then(() => {
            sentCount++;
            if (sentCount === users.length) {
              bot.sendMessage(
                chatId,
                `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`
              );
            }
          })
          .catch((error) => {
            console.error(
              `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`,
              error
            );
          });
      });
    });
  } else {
    bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
bot.onText(/\/delete (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const reminderId = match[1];

  db.run(
    "DELETE FROM reminders WHERE id = ? AND user_id = ?",
    [reminderId, chatId],
    function (err) {
      if (err) {
        console.error(err);
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        return;
      }

      if (this.changes > 0) {
        bot.sendMessage(chatId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ");
      } else {
        bot.sendMessage(
          chatId,
          "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
        );
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_all
bot.onText(/\/delete_all/, (msg) => {
  const chatId = msg.chat.id;

  db.run("DELETE FROM reminders WHERE user_id = ?", [chatId], function (err) {
    if (err) {
      console.error(err);
      bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
      return;
    }

    bot.sendMessage(chatId, `–£–¥–∞–ª–µ–Ω–æ ${this.changes} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
bot.onText(/\/list/, (msg) => {
  const chatId = msg.chat.id;

  db.all(
    "SELECT * FROM reminders WHERE user_id = ? ORDER BY time",
    [chatId],
    (err, reminders) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
        bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        return;
      }

      if (reminders.length === 0) {
        bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        return;
      }

      let message = "üìã *–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n";

      reminders.forEach((reminder) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
        let remainingDays = "";
        if (reminder.count_in_days === 99999) {
          remainingDays = "‚ôæÔ∏è (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)";
        } else {
          remainingDays = reminder.count_in_days;
        }

        message += `üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${reminder.text}\n`;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
        const times = reminder.time.split(",");
        if (times.length > 1) {
          message += `üïí *–í—Ä–µ–º—è:* ${times.join(", ")}\n`;
        } else {
          message += `üïí *–í—Ä–µ–º—è:* ${reminder.time}\n`;
        }

        message += `üÜî *ID:* \`${reminder.id}\`\n`;
        message += `‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:* ${remainingDays}\n`;

        if (reminder.days && reminder.days !== "–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å") {
          message += `üìÖ *–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:* ${reminder.days}\n`;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª—å
        let periodText = "";
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —á–∏—Å–ª—É, —Ç–∞–∫ –∫–∞–∫ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ INTEGER
        const everyWeekValue = parseInt(reminder.every_week);

        if (everyWeekValue === 0) {
          periodText = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é";
        } else if (everyWeekValue === 1) {
          periodText = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é";
        } else if (everyWeekValue >= 2) {
          periodText = `–∫–∞–∂–¥—ã–µ ${everyWeekValue + 1} –Ω–µ–¥–µ–ª–∏`;
        } else {
          // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –ë–î –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          periodText = `${reminder.every_week}`;
        }

        message += `üîÑ *–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:* ${periodText}\n`;

        message += "\n";
      });

      bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (text && !text.startsWith("/")) {
    try {
      const params = parseReminderParams(text);
      if (params) {
        saveReminder(chatId, params);
      }
    } catch (error) {
      bot.sendMessage(chatId, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
bot.on("callback_query", (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const userId = callbackQuery.from.id;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (data.startsWith("recreate_")) {
    const reminderId = data.replace("recreate_", "");
    const templateId = `template_${reminderId}`;

    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    db.get(
      "SELECT * FROM reminder_templates WHERE id = ? AND user_id = ?",
      [templateId, userId],
      (err, template) => {
        if (err || !template) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
          bot.answerCallbackQuery(callbackQuery.id, {
            text: "–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
            show_alert: true,
          });
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
        const params = {
          text: template.text,
          time: template.time,
          days: template.days,
          countInDays: "1",
          everyWeek: template.every_week.toString(),
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        saveReminder(userId, params);

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        bot.answerCallbackQuery(callbackQuery.id, {
          text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
          show_alert: false,
        });
      }
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function parseReminderParams(text) {
  const params = {};
  const parts = text.split("&");

  parts.forEach((part) => {
    const [key, value] = part.split("=");
    if (key && value) {
      params[key.trim()] = value.trim();
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!params.text) {
    throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (text)");
  }

  if (!params.time) {
    throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (time)");
  }

  if (!params.countInDays) {
    throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ (countInDays)");
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (!params.days) {
    params.days = "–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å"; // –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è everyWeek
  if (!params.everyWeek) {
    params.everyWeek = "0"; // –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  } else {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–æ–≤—ã–µ
    const everyWeekLower = params.everyWeek.toLowerCase();

    if (everyWeekLower === "–∫–∞–∂–¥—É—é" || everyWeekLower === "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é") {
      params.everyWeek = "0";
    } else if (
      everyWeekLower === "—á–µ—Ä–µ–∑" ||
      everyWeekLower === "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
    ) {
      params.everyWeek = "1";
    } else if (
      everyWeekLower === "–¥–≤–µ" ||
      everyWeekLower === "two" ||
      everyWeekLower === "–∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏"
    ) {
      params.everyWeek = "2";
    } else if (
      everyWeekLower === "—Ç—Ä–∏" ||
      everyWeekLower === "three" ||
      everyWeekLower === "–∫–∞–∂–¥—ã–µ 3 –Ω–µ–¥–µ–ª–∏"
    ) {
      params.everyWeek = "3";
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
      const numValue = parseInt(params.everyWeek);
      if (!isNaN(numValue)) {
        // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        params.everyWeek = numValue.toString();
      } else {
        // –ï—Å–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º, –Ω–∏ —á–∏—Å–ª–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ everyWeek: ${params.everyWeek}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
        );
        params.everyWeek = "0";
      }
    }
  }

  return params;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUser(user) {
  console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);

  if (!user || !user.id) {
    console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", user);
    return;
  }

  db.run(
    "INSERT OR IGNORE INTO users (id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
    [user.id, user.username || "", user.first_name || "", user.last_name || ""],
    function (err) {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      } else {
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${this.changes}`
        );
      }
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function saveReminder(userId, params) {
  const reminderId = uuidv4();

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º countInDays –∏ everyWeek –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const countInDays = parseInt(params.countInDays) || 99999;
  const everyWeek = parseInt(params.everyWeek) || 0;

  db.run(
    "INSERT INTO reminders (id, user_id, text, time, days, count_in_days, every_week) VALUES (?, ?, ?, ?, ?, ?, ?)",
    [
      reminderId,
      userId,
      params.text,
      params.time,
      params.days,
      countInDays,
      everyWeek,
    ],
    (err) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", err);
        bot.sendMessage(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        return;
      }

      bot.sendMessage(
        userId,
        `ID: \`${reminderId}\`\n–¢–µ–∫—Å—Ç: ${params.text}\n–í—Ä–µ–º—è: ${params.time}\n–î–Ω–∏: ${params.days}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: ${countInDays}\n–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–Ω–µ–¥–µ–ª—å): ${everyWeek}`,
        { parse_mode: "Markdown" }
      );
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendHelpMessage(chatId) {
  const helpText = `
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
text=–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è&time=14:00&days=–ø–Ω,—á—Ç,–ø—Ç&countInDays=10&everyWeek=0

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
- text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –ø–æ –ú–°–ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00,12:30,18:00
- days: –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
- countInDays: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —É–∫–∞–∂–∏—Ç–µ 99999
- everyWeek: –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –Ω–µ–¥–µ–ª—è—Ö:
  * 0 –∏–ª–∏ "–∫–∞–∂–¥—É—é" - –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
  * 1 –∏–ª–∏ "—á–µ—Ä–µ–∑" - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
  * 2 –∏–ª–∏ "–¥–≤–µ" - –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏ –∏ —Ç.–¥.

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/delete ID - —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
/delete_all - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
`;

  bot.sendMessage(chatId, helpText);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function setupReminderScheduler() {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  cron.schedule("* * * * *", () => {
    const now = new Date();
    const moscowTime = new Date(now.getTime() + 3 * 60 * 60 * 1000); // –ú–°–ö = UTC+3
    const currentHour = moscowTime.getUTCHours();
    const currentMinute = moscowTime.getUTCMinutes();
    const timeString = `${currentHour
      .toString()
      .padStart(2, "0")}:${currentMinute.toString().padStart(2, "0")}`;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const daysMap = {
      0: "–≤—Å",
      1: "–ø–Ω",
      2: "–≤—Ç",
      3: "—Å—Ä",
      4: "—á—Ç",
      5: "–ø—Ç",
      6: "—Å–±",
    };
    const currentDay = daysMap[moscowTime.getUTCDay()];

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
    const weekNumber = getWeekNumber(moscowTime);

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    db.all("SELECT * FROM reminders", [], (err, reminders) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", err);
        return;
      }

      reminders.forEach((reminder) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–¥–Ω–æ–º—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω
        const reminderTimes = reminder.time.split(",");
        if (!reminderTimes.includes(timeString)) {
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
        const reminderDays = reminder.days.split(",");
        if (!reminderDays.includes(currentDay)) {
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª—å
        if (
          reminder.every_week > 0 &&
          weekNumber % (parseInt(reminder.every_week) + 1) !== 0
        ) {
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        let messageText = reminder.text;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot
          .sendMessage(reminder.user_id, messageText)
          .then(() => {
            console.log(
              `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${reminder.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${reminder.user_id}`
            );

            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–æ–∫
            if (reminder.count_in_days !== 99999) {
              const newCount = reminder.count_in_days - 1;

              if (newCount <= 0) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                let periodText = "";
                const everyWeekValue = parseInt(reminder.every_week);

                if (everyWeekValue === 0) {
                  periodText = "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é";
                } else if (everyWeekValue === 1) {
                  periodText = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é";
                } else if (everyWeekValue >= 2) {
                  periodText = `–∫–∞–∂–¥—ã–µ ${everyWeekValue + 1} –Ω–µ–¥–µ–ª–∏`;
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                const completionMessage = `\n\n‚ö†Ô∏è *–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–∏–∏!*\n`;

                const replyMarkup = {
                  inline_keyboard: [
                    [
                      {
                        text: "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–∞ 1 –æ—Ç–ø—Ä–∞–≤–∫—É?",
                        callback_data: `recreate_${reminder.id}`,
                      },
                    ],
                  ],
                };

                bot.sendMessage(reminder.user_id, completionMessage, {
                  parse_mode: "Markdown",
                  reply_markup: replyMarkup,
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                const templateId = `template_${reminder.id}`;
                db.run(
                  "INSERT OR REPLACE INTO reminder_templates (id, user_id, text, time, days, every_week) VALUES (?, ?, ?, ?, ?, ?)",
                  [
                    templateId,
                    reminder.user_id,
                    reminder.text,
                    reminder.time,
                    reminder.days,
                    reminder.every_week,
                  ],
                  (err) => {
                    if (err) {
                      console.error(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                        err
                      );
                    }
                  }
                );

                // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–ø—Ä–∞–≤–æ–∫
                db.run("DELETE FROM reminders WHERE id = ?", [reminder.id]);
              } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                db.run("UPDATE reminders SET count_in_days = ? WHERE id = ?", [
                  newCount,
                  reminder.id,
                ]);
              }
            }
          })
          .catch((error) => {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${reminder.id}:`, error);
          });
      });
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
function getWeekNumber(date) {
  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
setupReminderScheduler();

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
